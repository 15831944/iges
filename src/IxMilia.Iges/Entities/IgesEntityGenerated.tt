<# // Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
var xml = XDocument.Load(this.Host.ResolvePath(@"IgesEntitySpec.xml")).Root;
var xmlns = xml.Name.NamespaceName;
var entities = xml.Elements(XName.Get("Entity", xmlns));
#>
// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Collections.Generic;
using System.Linq;
using IxMilia.Iges.Directory;

namespace IxMilia.Iges.Entities
{
    public enum IgesEntityType
    {
<#
foreach (var entity in entities.OrderBy(e => TypeCode(e)))
{
#>
        <#= EntityType(entity) #> = <#= TypeCode(entity) #>,
<#
}
#>
    }

    public partial class IgesEntity
    {
        internal static IgesEntity FromData(IgesDirectoryData directoryData, List<string> parameters)
        {
            IgesEntity entity = null;
            switch (directoryData.EntityType)
            {
<#
foreach (var entity in entities.OrderBy(e => EntityType(e)))
{
#>
                case IgesEntityType.<#= EntityType(entity) #>:
                    entity = new <#= Name(entity) #>();
                    break;
<#
}
#>
            }

            if (entity != null)
            {
                entity.PopulateDirectoryData(directoryData);
                entity.ReadParameters(parameters);
            }

            return entity;
        }
    }

<#
foreach (var entity in entities)
{
#>
    /// <summary>
    /// <#= Name(entity) #> class
    /// </summary>
    public partial class <#= Name(entity) #> : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.<#= EntityType(entity) #>; } }

        // properties
<#
	foreach (var property in Properties(entity))
	{
#>
        <#= Accessibility(property) #> <#= Type(property) #> <#= Name(property) #> { get; set; }
<#
	} // foreach property
#>

<#
	var customProperties = CustomProperties(entity);
	if (customProperties.Any())
	{
#>
        // custom properties
<#
		foreach (var custom in CustomProperties(entity))
		{
#>
        public <#= Overrides(custom) #><#= Type(custom) #> <#= Name(custom) #>
        {
<#
			var getText = Get(custom);
			var setText = Set(custom);
			if (getText != null)
			{
#>
            get
            {
<#= Indent(getText, "                ") #>
            }
<#
			} // end if
			if (setText != null)
			{
#>
            set
            {
<#= Indent(setText, "                ") #>
            }
<#
			}
#>
        }

<#
		} // foreach custom
	} // if customProperties.Any()
#>
        public <#= Name(entity) #>()
            : base()
        {
<#
	foreach (var property in Properties(entity))
	{
#>
            this.<#= Name(property) #> = <#= DefaultValue(property) #>;
<#
	} // foreach property
#>
        }

        protected override void ReadParameters(List<string> parameters)
        {
<#
	var parameterOrder = ParameterOrder(entity).Where(p => Mode(p).Contains("Read"));
	if (parameterOrder.Any())
	{
#>
            int index = 0;
<#
		foreach (var parameter in parameterOrder)
		{
			var count = Count(parameter);
			if (count == null)
			{
				var defaultValue = DefaultValue(parameter);
				if (defaultValue == null)
				{
#>
            this.<#= Value(parameter) #> = <#= Converter(parameter) #>(parameters[index++]);
<#
				} // end if
				else
				{
#>
            this.<#= Value(parameter) #> = <#= Converter(parameter) #>(ReadParameterOrDefault(parameters, index++, "<#= defaultValue #>"));
<#
				} // else
			} // end if
			else
			{
#>
            for (int i = 0; i < <#= count #>; i++)
            {
                this.<#= Value(parameter) #>.Add(<#= Converter(parameter) #>(parameters[index++]));
            }

<#
			} // else
		} // foreach parameter
	} // if parameterOrder.Any()
#>
        }

        protected override void WriteParameters(List<object> parameters)
        {
<#
	foreach (var parameter in ParameterOrder(entity).Where(p => Mode(p).Contains("Write")))
	{
		var function = "Add";
		var selector = "";
		if (Count(parameter) != null)
		{
			function += "Range";
			selector = ".Cast<object>()";
		}

		var ifWrite = "";
		var defaultValue = DefaultValue(parameter);
		if (defaultValue != null)
		{
			ifWrite = string.Format("if ({0} != {1}) ", Value(parameter), defaultValue);
		}
#>
            <#= ifWrite #>parameters.<#= function #>(this.<#= Value(parameter) #><#= selector #>);
<#
	} // foreach parameter
#>
        }
    }

<#
	
} // foreach entity
#>
}
<#+
int TypeCode(XElement entity)
{
	return int.Parse(entity.Attribute("TypeCode").Value);
}

string Accessibility(XElement property)
{
	var att = property.Attribute("Accessibility");
	return att == null ? "public" : att.Value;
}

string EntityType(XElement entity)
{
	return entity.Attribute("EntityType").Value;
}

string Name(XElement entity)
{
	return entity.Attribute("Name").Value;
}

IEnumerable<XElement> Properties(XElement entity)
{
	return entity.Elements(XName.Get("Property", entity.Name.NamespaceName));
}

string Mode(XElement parameter)
{
	var att = parameter.Attribute("Mode");
	return att == null ? "ReadAndWrite" : att.Value;
}

IEnumerable<XElement> CustomProperties(XElement entity)
{
	return entity.Elements(XName.Get("CustomProperty", entity.Name.NamespaceName));
}

string Get(XElement customProperty)
{
	return CDataValue(customProperty, "Get");
}

string Set(XElement customProperty)
{
	return CDataValue(customProperty, "Set");
}

string Indent(string value, string indention)
{
	var parts = value.Trim().Split('\n').Select(s => s.Trim());
	return string.Join("\r\n", parts.Select(s => indention + s));
}

string CDataValue(XElement xml, string element)
{
	var xml2 = xml.Element(XName.Get(element, xml.Name.NamespaceName));
	if (xml2 == null) return null;
	return xml2.Value.Trim();
}

string Type(XElement parameter)
{
	return parameter.Attribute("Type").Value;
}

string DefaultValue(XElement parameter)
{
	if (AllowMultiples(parameter))
	{
		return string.Format("new List<{0}>()", Type(parameter));
	}
	else
	{
		var att = parameter.Attribute("DefaultValue");
		return att == null ? null : att.Value;
	}
}

string Converter(XElement parameter)
{
	return parameter.Attribute("Converter").Value;
}

string Overrides(XElement customProperty)
{
	var att = customProperty.Attribute("Overrides");
	var isOverride = att != null && bool.Parse(att.Value);
	return isOverride ? "override " : "";
}

bool AllowMultiples(XElement parameter)
{
	var att = parameter.Attribute("AllowMultiples");
	return att != null && bool.Parse(att.Value);
}

IEnumerable<XElement> ParameterOrder(XElement entity)
{
	var paramElement = entity.Element(XName.Get("ParameterOrder", entity.Name.NamespaceName));
	return paramElement == null ? new XElement[0] : paramElement.Elements();
}

string Value(XElement parameter)
{
	return parameter.Attribute("Value").Value;
}

string Count(XElement parameter)
{
	var att = parameter.Attribute("Count");
	return att == null ? null : att.Value;
}
#>